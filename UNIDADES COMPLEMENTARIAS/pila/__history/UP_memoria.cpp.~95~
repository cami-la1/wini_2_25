	//---------------------------------------------------------------------------

	#pragma hdrstop

	#include "UP_memoria.h"
	//---------------------------------------------------------------------------
	#pragma package(smart_init)
	pilaM::pilaM() {
		 pe=-1;

	// Cm = new CSmemoria();
	}
	pilaM::pilaM(CSmemoria* m) {
	 pe=-1;
	 longitud=0;
	 Cm= m;
	}

	bool pilaM::Vacia(){
	return (longitud==0) ;
	}

	void pilaM ::Meter(dir e){
	int dir=Cm->new_espacio("elemento,sig");
	if (dir!=NULO) {
		 Cm->poner_dato(dir,elementNL ,e);
			 Cm->poner_dato(dir, sigNL ,pe) ;
		 pe=dir;

		longitud++;
	}
	}


	void pilaM::Sacar(dir& e){
		   if (Vacia()==false) {
		   int z=pe;
				e = Cm->obtenerDato(pe,elementNL) ;// Assigning the top element to e
		pe=Cm->obtenerDato(pe, sigNL); // Moving the top pointer to the next element
			Cm->Delete_espacio(z);  // Deleting the previous top element
		longitud--;
		   }

	}
	dir pilaM::cima() {
		if (Vacia()) {
			// Handle error: Stack is empty
			return -1;  // Return an error value or throw an exception
		} else {
			return Cm->obtenerDato(pe,elementNL); // Return the top element
		}
	}


void pilaM::imprimir(TColor FormColor, TCanvas *Canvas) {
if (!Vacia()) {


    const int TamanoCeldaX = 60;
    const int TamanoCeldaY = 30;
    const int x = 500 ;
    const int yBase = 400; // parte inferior donde se empieza a dibujar

    // Paso 1: guardar direcciones en orden de inserción
    int direcciones[MAX];
    int dir = pe;
    int n = 0;
    while (dir != NULO && n < MAX) {
        direcciones[n] = dir;
        dir = Cm->obtenerDato(dir, sigNL);
        n++;
    }

    // Paso 2: dibujar desde la base hacia la cabeza (de abajo a arriba)
    int y = yBase - TamanoCeldaY;  // empezar desde la parte inferior
    for (int i = 0; i < n; i++) {
        int dato = Cm->obtenerDato(direcciones[i], elementNL);

        // Coordenadas del rectángulo
        int x1 = x;
        int y1 = y;
        int x2 = x + TamanoCeldaX;
        int y2 = y + TamanoCeldaY;

        // Dibujar rectángulo SIN borde superior si es la cabeza
        Canvas->Brush->Color = FormColor;
        Canvas->Pen->Color = clBlack;

        if (i == n - 1) {
			// Cabeza: no dibujar línea superior
			Canvas->MoveTo(x1, y1);       // inicio a la izquierda
			Canvas->LineTo(x1, y2);       // izquierda hacia abajo
			Canvas->LineTo(x2, y2);       // abajo hacia la derecha
			Canvas->LineTo(x2, y1);       // derecha hacia arriba (sin cerrar arriba)
		} else {
            Canvas->MoveTo(x1, y1);       // inicio a la izquierda
			Canvas->LineTo(x1, y2);       // izquierda hacia abajo
			Canvas->LineTo(x2, y2);       // abajo hacia la derecha
			Canvas->LineTo(x2, y1);
        }

        // Dibuja el dato
        Canvas->TextOutW(x1 + 5, y1 + 5, IntToStr(dato));
		y += TamanoCeldaY;  // subir para la siguiente celda
    }

    // Etiqueta "cabeza"
    if (n > 0) {
        Canvas->Font->Size = 8;
		Canvas->TextOutW(x + TamanoCeldaX + 10, y - TamanoCeldaY + 5, "cabeza");
	}
}else
ShowMessage("pila vacia") ;
}



	//--------------------------------
	//----------aplicacion1----------

    float pilaM::Evalua(float Op1, char Operador, float Op2) {
	switch (Operador) {
		case '^': return pow(Op1, Op2);
		case '*': return Op1 * Op2;
		case '/': return Op1 / Op2;
		case '+': return Op1 + Op2;
		case '-': return Op1 - Op2;
		default: throw Exception("Operador desconocido");
	}
}
float pilaM::EvaluarPostfija(const String& ExpPostfija) {
	for (int i = 1; i <= ExpPostfija.Length(); i++) {
		char ch = ExpPostfija[i];
		if (isdigit(ch)) {
			Meter(ch - '0');  // Convertir carácter numérico a entero
		} else {
			dir Op2, Op1;
			Sacar(Op2);
			Sacar(Op1);
			float Z = Evalua(Op1, ch, Op2);
			Meter(Z);
		}
	}
	return cima();
}
bool pilaM::ParentesisOk(const String& Expresion) {
	for (int i = 1; i <= Expresion.Length(); i++) {
		char ch = Expresion[i];
		if (ch == '(') {
			Meter('(');
		} else if (ch == ')') {
			if (Vacia()) return false;
			dir aux;
			Sacar(aux);
		}
	}
	return Vacia();
}
String pilaM::InfijaToPostfija(const String& Infija) {
	String Postfija = "";
	for (int i = 1; i <= Infija.Length(); i++) {
		char ch = Infija[i];
		if (isdigit(ch)) {
			Postfija += ch;
		} else if (ch == '(') {
			Meter(ch);
		} else if (ch == ')') {
			dir aux;
			while (!Vacia()) {
				Sacar(aux);
				if ((char)aux == '(') break;
				Postfija += (char)aux;
			}
		} else {
			while (!Vacia() && PrioridadInfija(ch) <= PrioridadPila((char)cima())) {
				dir aux;
				Sacar(aux);
				Postfija += (char)aux;
			}
			Meter(ch);
		}
	}
	while (!Vacia()) {
		dir aux;
		Sacar(aux);
		Postfija += (char)aux;
	}
	return Postfija;
}
int pilaM::PrioridadInfija(char c) {
	switch (c) {
		case '^': return 4;
		case '*': case '/': return 2;
		case '+': case '-': return 1;
		case '(': return 5;
		default: return 0;
	}
}

int pilaM::PrioridadPila(char c) {
	switch (c) {
		case '^': return 3;
		case '*': case '/': return 2;
		case '+': case '-': return 1;
		case '(': return 0;
		default: return 0;
	}
}

//--------------------------
//---------aplicacion para n digitos


String pilaM::InfijaToPostfija2(const String& infija) {
	String postfija = "";    // Resultado que contendrá la expresión postfija
	String numero = "";      // Acumulador para números (con posible signo y coma)
	char prevChar = 0;       // Carácter anterior, usado para determinar contexto de signos

	for (int i = 1; i <= infija.Length(); i++) {
		char ch = infija[i];  // Carácter actual

		// Si es un signo '-' o '+' al principio o después de un operador/paréntesis, es parte de un número
		if ((ch == '-' || ch == '+') && (i == 1 || strchr("+-*/^(", prevChar))) {
			numero += ch;
		}
		// Si es un dígito o una coma decimal, lo acumulamos como parte del número
		else if (isdigit(ch) || ch == ',') {
			numero += ch;
		}
		else {
			// Si habíamos acumulado un número, lo agregamos a la postfija
			if (!numero.IsEmpty()) {
				postfija += numero + " ";
				numero = "";
			}

			// Si es un paréntesis de apertura, lo metemos en la pila
			if (ch == '(') {
				Meter(ch);
			}
			// Si es un paréntesis de cierre, desapilamos hasta encontrar el paréntesis de apertura
			else if (ch == ')') {
				dir aux;
				while (!Vacia()) {
					Sacar(aux);
					if ((char)aux == '(') break;
					postfija += (char)aux;
					postfija += " ";
				}
			}
			// Si es un operador, desapilamos operadores de mayor o igual prioridad antes de meterlo
			else if (strchr("+-*/^", ch)) {
				while (!Vacia() && PrioridadInfija(ch) <= PrioridadPila((char)cima())) {
					dir aux;
					Sacar(aux);
					postfija += (char)aux;
					postfija += " ";
				}
				Meter(ch);
			}
		}

		// Actualizar el carácter anterior solo si no es espacio
		if (ch != ' ') prevChar = ch;
	}

	// Si queda un número por procesar, lo agregamos
	if (!numero.IsEmpty()) {
		postfija += numero + " ";
	}

	// Desapilamos lo que quede en la pila (operadores pendientes)
	while (!Vacia()) {
		dir aux;
		Sacar(aux);
		postfija += (char)aux;
		postfija += " ";
	}

	return postfija.Trim();  // Quitamos espacios finales y retornamos
}


float pilaM::EvaluarPostfija2(const String& expPostfija) {
	String token = "";  // Acumula cada número u operador como texto

	for (int i = 1; i <= expPostfija.Length(); i++) {
		char ch = expPostfija[i];

		// Si no es espacio, seguimos acumulando caracteres para el token
		if (ch != ' ') {
			token += ch;
		}
		// Si encontramos un espacio y el token está lleno, lo procesamos
		else if (!token.IsEmpty()) {
			// Si el token es un operador (un solo carácter), realizamos operación
			if (token.Length() == 1 && strchr("+-*/^", token[1])) {
				dir Op2, Op1;
				Sacar(Op2);  // Segundo operando
				Sacar(Op1);  // Primer operando
				float Z = Evalua(Op1, token[1], Op2);  // Ejecutar operación
				Meter(Z);  // Guardar resultado
			}
			else {
				// Si es un número, intentamos convertirlo
				try {
					float num = StrToFloat(token);  // Puede fallar si token no es número válido
					Meter(num);
				} catch (...) {
					ShowMessage("Error al convertir '" + token + "' a número.");
					return 0;  // Finaliza en caso de error
				}
			}
			token = "";  // Limpiar token para el siguiente elemento
		}
	}

	// Procesar el último token si no terminó con espacio
	if (!token.IsEmpty()) {
		if (token.Length() == 1 && strchr("+-*/^", token[1])) {
			dir Op2, Op1;
			Sacar(Op2);
			Sacar(Op1);
			float Z = Evalua(Op1, token[1], Op2);
			Meter(Z);
		} else {
			try {
				float num = StrToFloat(token);
				Meter(num);
			} catch (...) {
				ShowMessage("Error al convertir '" + token + "' a número.");
				return 0;
			}
		}
	}

	return cima();  // El valor final que quedó en la cima de la pila es el resultado
}

 String pilaM::imprimir4() {
	String resultado = "[";
	int direcciones[MAX];
	int dir = pe;
	int n = 0;

	// Paso 1: recorrer la pila y guardar direcciones
	while (dir != NULO && n < MAX) {
		direcciones[n] = dir;
		dir = Cm->obtenerDato(dir, sigNL);
		n++;
	}

	// Paso 2: construir string desde el fondo hacia la cima
	for (int i = n - 1; i >= 0; i--) {
		int dato = Cm->obtenerDato(direcciones[i], elementNL);
		resultado += IntToStr(dato);
		if (i > 0) resultado += ", ";
	}

	resultado += "]";
	return resultado;
}

//--------------
 void pilaM::mostrarAtributos(TColor FormColor, TCanvas *Canvas){


 }


String pilaM::ValidarSintaxis(const String& expr) {
	int balance = 0;
	char prev = 0; // Carácter anterior válido (no espacio)
	for (int i = 1; i <= expr.Length(); i++) {
		char ch = expr[i];

		// Verificar paréntesis
		if (ch == '(') {
			balance++;
		} else if (ch == ')') {
            balance--;
			if (balance < 0) return "Error: Paréntesis ')' sin abrir.";
            if (prev == '(') return "Error: Paréntesis vacío '()'.";
		}

        // Verificar operadores duplicados
		if (strchr("+-*/^", ch)) {
            // Si el operador actual es '+' o '-', y está al inicio o justo después de '(' se permite (es signo)
            if (!((ch == '+' || ch == '-') && (prev == 0 || prev == '('))) {
				// Si el anterior también es operador, error
                if (strchr("+-*/^", prev)) {
                    return "Error: Dos operadores seguidos '" + String(prev) + String(ch) + "'";
                }
			}
        }

        // Operador justo antes de cierre
        if (ch == ')' && strchr("+-*/^", prev)) {
            return "Error: Operador antes de ')'.";
        }

        // Expresión termina mal
        if (i == expr.Length() && strchr("+-*/^(", ch)) {
            return "Error: Expresión termina con un símbolo inválido.";
        }

        // Expresión empieza mal
        if (i == 1 && strchr("*/^)", ch)) {
            return "Error: Expresión no puede empezar con '" + String(ch) + "'";
        }

        // Actualizar prev solo si ch no es espacio
        if (ch != ' ') prev = ch;
    }

    if (balance > 0) return "Error: Falta cerrar paréntesis ')'.";
    if (balance < 0) return "Error: Falta abrir paréntesis '('.";

    return ""; // Sin errores
}

