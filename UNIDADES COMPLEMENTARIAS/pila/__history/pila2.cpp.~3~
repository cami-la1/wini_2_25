	//---------------------------------------------------------------------------

	#pragma hdrstop

	#include "UP_memoria.h"
	//---------------------------------------------------------------------------
	#pragma package(smart_init)
	pilaMM::pilaMM() {
		 pe=-1;

	// Cm = new CSmemoria();
	}
	pilaMM::pilaMM(CSmemoria* m) {
	 pe=-1;
	 longitud=0;
	 Cm= m;
	}

	bool pilaMM::Vacia(){
	return (longitud==0) ;
	}

	void pilaMM ::Meter(dir e){
	int dir=Cm->new_espacio("elemento,sig");
	if (dir!=NULO) {
		 Cm->poner_dato(dir,elementNL ,e);
			 Cm->poner_dato(dir, sigNL ,pe) ;
		 pe=dir;

		longitud++;
	}
	}


	void pilaMM::Sacar(dir& e){
		   if (Vacia()==false) {
		   int z=pe;
				e = Cm->obtenerDato(pe,elementNL) ;// Assigning the top element to e
		pe=Cm->obtenerDato(pe, sigNL); // Moving the top pointer to the next element
			Cm->Delete_espacio(z);  // Deleting the previous top element
		longitud--;
		   }

	}
	dir pilaMM::cima() {
		if (Vacia()) {
			// Handle error: Stack is empty
			return -1;  // Return an error value or throw an exception
		} else {
			return Cm->obtenerDato(pe,elementNL); // Return the top element
		}
	}


	 void pilaMM::imprimir(TColor FormColor, TCanvas *Canvas){
		 Cm->ImprimirPantalla2(FormColor, Canvas,1150,600);
	 }


	//--------------------------------
	//----------aplicacion1----------


	 float pilaMM::Evalua(float Op1, char Operador, float Op2) {
		switch (Operador) {
			case '^': return pow(Op1, Op2);
			case '*': return Op1 * Op2;
			case '/': return Op1 / Op2;
			case '+': return Op1 + Op2;
			case '-': return Op1 - Op2;
			default:
				throw Exception("Operador desconocido");
		}
	}
	float pilaMM::EvaluarPostfija(const String& ExpPostfija) {
		for (int i = 1; i <= ExpPostfija.Length(); ++i) {
			char ch = ExpPostfija[i];
			if (isdigit(ch)) { // Si es un operando
				Meter(ch - '0'); // Convertir char a int y meter en la pila
			} else { // Si es un operador
				dir Op2, Op1;
				Sacar(Op2);
				Sacar(Op1);
				float Z = Evalua(Op1, ch, Op2);
				Meter(Z);
			}
		}
		return cima(); // Resultado final de la evaluación
	}
int pilaMM::PrioridadInfija(char c) {
	switch (c) {
		case '^': return 4;
		case '*': return 2;
		case '/': return 2;
		case '+': return 1;
		case '-': return 1;
		case '(': return 5;
		default: return 0;
	}
}
int pilaMM::PrioridadPila(char c) {
	switch (c) {
		case '^': return 3;
		case '*': return 2;
		case '/': return 2;
		case '+': return 1;
		case '-': return 1;
        case '(': return 0;
		default: return 0;
	}
}
